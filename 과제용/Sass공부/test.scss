// 웹브라우저는 .css만 읽을 수 있다. 그래서 .scss는 읽을 수 없다.
// 그래서 scss를 css로 변환해야 한다.

// 1. 어려운 단어를 기억해야할 땐 변수문법을 사용하여 sass가 편리하다.
$Primary: #2a4cb2;
// Primary에 색상을 저장하였다.
$서브: #fdfdfd;
// 한국어 변수도 선언 가능
$기본사이즈: 16px;
// 사이즈도 넣을 수 있음

.background {
  background-color: $Primary;
  font-size: $기본사이즈 - 2px;
  // SASS에서 사칙연산이 가능하다 (피그마?)
  // + 나 - 는 같은 단위끼리 해야한다.
}

// CSS
/* :root {
  --main-color: red;
  css도 기본 문법에 변수가 있다!
}  */

/* .background {
  background-color: var(--main-color);
  하지만 이런식으로 var을 붙여서 사용해야 하기 때문에 sass보다는 별로다..
  font-size: 14px;
} */

// css의 사칙연산

// .background {
//   background-color: #2a4cb2;
//   width: calc(40%-20%);
//  이런식으로 calc를 써서 css도 사칙연산이 가능하다.
// }

// nesting 문법
.main-bg h4 {
  font-size: 16px;
}

.main-bg button {
  color: red;
}
// 원래는 위쪽 처럼  요소 안쪽에 있는 요소들을 스타일 했지만

.main-bg {
  h4 {
    font-size: 16px;
  }
  button {
    color: red;
  }
}
// nesting문법을 사용하면 이런식으로 작성 할 수 있다.
// 관련된 class들을 묶을 떄 효과적이다.

// @exstend 문법
%btn {
  width: 100px;
  height: 100px;
  padding: 20px;
}

.btn2 {
  width: 100px;
  height: 100px;
  padding: 20px;
}
// %로 생성한 class는 임시클래스 라고 하면 단독으로 컴파일된지 않는다는 특징이 있다.
// 그래서 css파일에는 btn이 안보임

.btn-green {
  @extend %btn;
  // 임시 class를 사용하기 위해선 @extend라는 걸 붙여줘야 한다.
  color: green;
}

.btn-green {
  @extend .btn2;
  // 이런식으로 그냥 class로도 가능하다.
  color: blue;
}

.btn-green {
  @extend %btn;
  color: red;
}

// 과제
%box {
  width: 200px;
  height: 200px;
  padding: 20px;
}

.box-green {
  @extend %btn;
  background: green;
}

.box-blue {
  @extend %btn;
  background: blue;
}

.box-red {
  @extend %btn;
  background: red;
}
